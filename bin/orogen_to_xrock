#! /usr/bin/env python

import os
import sys
import yaml
import datetime as dt

def makeDir(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        pass

now = dt.datetime.now()
path = "orogen_models"
dbPath= "cnd_db"

if "AUTOPROJ_CURRENT_ROOT" in os.environ:
    dbPath = os.path.join(os.environ["AUTOPROJ_CURRENT_ROOT"],
                          "install", "configuration", "cnd_gui", dbPath)
    path = os.path.join(os.environ["AUTOPROJ_CURRENT_ROOT"],
                          "install", "share", "orogen", "models")

files = []
if len(sys.argv) > 1:
    modelName = os.path.join(path, sys.argv[1])
    if os.path.exists(modelName):
        files.append(modelName)
    elif os.path.exists(modelName+".yml"):
        files.append(modelName+".yml")
    elif os.path.exists(modelName+"::Task.yml"):
        files.append(modelName+"::Task.yml")
    elif os.path.exists(sys.argv[1]):
        files.append(sys.argv[1])
else:
    for (filepath, dirnames, filenames) in os.walk(path):
        for name in filenames:
            if name[-4:] == ".yml":
                files.append(os.path.join(filepath,name))

versionName = "v0.0.1"
if len(sys.argv) > 2:
    versionName = sys.argv[2]

for ymlFile in files:
    model = {}
    with open(ymlFile, "r") as f:
        model = yaml.load(f.read())
    for key1,value1 in model.items():
        for key2,value2 in value1.items():
            exportModel = {"domain": "SOFTWARE", "type": "system_modelling::task_graph::Task", "versions": [{"date": now, "name": versionName, "interfaces": []}]}
            data = {"framework": "Rock"}
            modelName = key1+"::"+key2
            exportModel["name"] = modelName
            if "inputPorts" in value2:
                for port in value2["inputPorts"]:
                    interface = {"direction": "INCOMING", "name": port["Name"], "type": port["Type"]}
                    exportModel["versions"][0]["interfaces"].append(interface)
            if "outputPorts" in value2:
                for port in value2["outputPorts"]:
                    interface = {"direction": "OUTGOING", "name": port["Name"], "type": port["Type"]}
                    exportModel["versions"][0]["interfaces"].append(interface)
            if "properties" in value2:
                data["properties"] = value2["properties"]
            exportModel["versions"][0]["softwareData"] = {"data": yaml.dump(data)}
            os.system("rm export.yml")
            os.system("oroconf extract " + modelName + " --save=export.yml")
            lines = []
            if os.path.exists("export.yml"):
                with open("export.yml", "r") as f:
                    lines = f.readlines()
                description = "# "+modelName+"\\n\\nConfiguration documentation:\\n\\n"
                defaultConfig = "activity:\n  type: PERIODIC\n  period: 0.1\n  priority: 90\n  realtime: false\nstate: RUNNING\n"
                description += "    activity:\\n      type: PERIODIC\\n      period: 0.1\\n      priority: 90\\n      realtime: false\\n    state: RUNNING\\n"
                if len(lines) > 1:
                    defaultConfig +="config:"
                    description +="    config:"
                    for line in lines[1:]:
                        defaultConfig += "\n  " + line.replace('"', '\\"')
                        description += "\\n      " + line.replace('"', '\\"')
                exportModel["versions"][0]["defaultConfiguration"] = {"data": defaultConfig}
                exportModel["versions"][0]["softwareData"] = {"data": 'description:\n  markdown: "'+description+'"'}
            os.system("rm export.yml")
            modelPath = os.path.join(dbPath, modelName, versionName)
            makeDir(modelPath)
            with open(os.path.join(modelPath, "model.yml"), "w") as f:
                      f.write(yaml.dump(exportModel))

if len(files) > 0:
    os.system("recreate_info_yml " + dbPath)
